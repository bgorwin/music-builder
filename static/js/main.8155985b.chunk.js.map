{"version":3,"sources":["util/Spotify.js","components/SearchBar/SearchBar.js","components/Track/Track.js","components/TrackList/TrackList.js","components/SearchResults/SearchResults.js","components/Playlist/Playlist.js","components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","placeholder","onChange","onClick","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","key","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","clientId","process","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","filter","currentTrack","trackURIs","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8155985b.chunk.js","sourcesContent":["const clientId = `${process.env.REACT_APP_SPOTIFY}`;\nconst redirectUri = 'http://localhost:3000/';\nlet accessToken;\n\nconst Spotify = {\n\tgetAccessToken() {\n\t\tif (accessToken) {\n\t\t\treturn accessToken;\n\t\t}\n\n\t\tconst accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n\t\tconst expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\t\tif (accessTokenMatch && expiresInMatch) {\n\t\t\taccessToken = accessTokenMatch[1];\n\t\t\tconst expiresIn = Number(expiresInMatch[1]);\n\t\t\twindow.setTimeout(() => (accessToken = ''), expiresIn * 1000);\n\t\t\twindow.history.pushState('Access Token', null, '/'); // This clears the parameters, allowing us to grab a new access token when it expires.\n\t\t\treturn accessToken;\n\t\t} else {\n\t\t\tconst accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n\t\t\twindow.location = accessUrl;\n\t\t}\n\t},\n\n\tsearch(term) {\n\t\tconst accessToken = Spotify.getAccessToken();\n\t\treturn fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${accessToken}`\n\t\t\t}\n\t\t})\n\t\t\t.then((response) => {\n\t\t\t\treturn response.json();\n\t\t\t})\n\t\t\t.then((jsonResponse) => {\n\t\t\t\tif (!jsonResponse.tracks) {\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\t\t\t\treturn jsonResponse.tracks.items.map((track) => ({\n\t\t\t\t\tid: track.id,\n\t\t\t\t\tname: track.name,\n\t\t\t\t\tartist: track.artists[0].name,\n\t\t\t\t\talbum: track.album.name,\n\t\t\t\t\turi: track.uri\n\t\t\t\t}));\n\t\t\t});\n\t},\n\n\tsavePlaylist(name, trackUris) {\n\t\tif (!name || !trackUris.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst accessToken = Spotify.getAccessToken();\n\t\tconst headers = { Authorization: `Bearer ${accessToken}` };\n\t\tlet userId;\n\n\t\treturn fetch('https://api.spotify.com/v1/me', { headers: headers })\n\t\t\t.then((response) => response.json())\n\t\t\t.then((jsonResponse) => {\n\t\t\t\tuserId = jsonResponse.id;\n\t\t\t\treturn fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n\t\t\t\t\theaders: headers,\n\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\tbody: JSON.stringify({ name: name })\n\t\t\t\t})\n\t\t\t\t\t.then((response) => response.json())\n\t\t\t\t\t.then((jsonResponse) => {\n\t\t\t\t\t\tconst playlistId = jsonResponse.id;\n\t\t\t\t\t\treturn fetch(\n\t\t\t\t\t\t\t`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\theaders: headers,\n\t\t\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\t\t\tbody: JSON.stringify({ uris: trackUris })\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t});\n\t}\n};\n\nexport default Spotify;\n","import React, { Component } from 'react';\nimport './SearchBar.css';\n\nexport default class SearchBar extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tterm: ''\n\t\t};\n\n\t\tthis.search = this.search.bind(this);\n\t\tthis.handleTermChange = this.handleTermChange.bind(this);\n\t}\n\n\tsearch() {\n\t\tthis.props.onSearch(this.state.term);\n\t}\n\n\thandleTermChange(event) {\n\t\tthis.setState({ term: event.target.value });\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"SearchBar\">\n\t\t\t\t<input\n\t\t\t\t\tplaceholder=\"Enter A Song, Album, or Artist\"\n\t\t\t\t\tonChange={this.handleTermChange}\n\t\t\t\t/>\n\t\t\t\t<button className=\"SearchButton\" onClick={this.search}>\n\t\t\t\t\tSEARCH\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React, { Component } from 'react';\nimport './Track.css';\n\nexport default class Track extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.addTrack = this.addTrack.bind(this);\n\t\tthis.removeTrack = this.removeTrack.bind(this);\n\t}\n\n\trenderAction() {\n\t\tif (this.props.isRemoval) {\n\t\t\treturn (\n\t\t\t\t<button className=\"Track-action\" onClick={this.removeTrack}>\n\t\t\t\t\t-\n\t\t\t\t</button>\n\t\t\t);\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<button className=\"Track-action\" onClick={this.addTrack}>\n\t\t\t\t\t+\n\t\t\t\t</button>\n\t\t\t);\n\t\t}\n\t}\n\n\taddTrack() {\n\t\tthis.props.onAdd(this.props.track);\n\t}\n\n\tremoveTrack() {\n\t\tthis.props.onRemove(this.props.track);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"Track\">\n\t\t\t\t<div className=\"Track-information\">\n\t\t\t\t\t<h3>{this.props.track.name}</h3>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t{this.props.track.artist} | {this.props.track.album}\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t{this.renderAction()}\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React, { Component } from 'react';\nimport Track from '../Track/Track';\nimport './TrackList.css';\n\nexport default class TrackList extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"TrackList\">\n\t\t\t\t{this.props.tracks.map((track) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Track\n\t\t\t\t\t\t\ttrack={track}\n\t\t\t\t\t\t\tkey={track.id}\n\t\t\t\t\t\t\tonAdd={this.props.onAdd}\n\t\t\t\t\t\t\tonRemove={this.props.onRemove}\n\t\t\t\t\t\t\tisRemoval={this.props.isRemoval}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React, { Component } from 'react';\nimport TrackList from '../TrackList/TrackList';\nimport './SearchResults.css';\n\nexport default class SearchResults extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"SearchResults\">\n\t\t\t\t<h2>Results</h2>\n\t\t\t\t<TrackList\n\t\t\t\t\ttracks={this.props.searchResults}\n\t\t\t\t\tonAdd={this.props.onAdd}\n\t\t\t\t\tisRemoval={false}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React, { Component } from 'react';\nimport './Playlist.css';\nimport TrackList from '../TrackList/TrackList';\n\nexport default class Playlist extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.handleNameChange = this.handleNameChange.bind(this);\n\t}\n\n\thandleNameChange(event) {\n\t\tthis.props.onNameChange(event.target.value);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"Playlist\">\n\t\t\t\t<input defaultValue={'New Playlist'} onChange={this.handleNameChange} />\n\t\t\t\t<TrackList\n\t\t\t\t\ttracks={this.props.playlistTracks}\n\t\t\t\t\tonRemove={this.props.onRemove}\n\t\t\t\t\tisRemoval={true}\n\t\t\t\t/>\n\t\t\t\t<button className=\"Playlist-save\" onClick={this.props.onSave}>\n\t\t\t\t\tSAVE TO SPOTIFY\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\nexport default class App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tsearchResults: [],\n\t\t\tplaylistName: 'My Playlist',\n\t\t\tplaylistTracks: []\n\t\t};\n\n\t\tthis.addTrack = this.addTrack.bind(this);\n\t\tthis.removeTrack = this.removeTrack.bind(this);\n\t\tthis.updatePlaylistName = this.updatePlaylistName.bind(this);\n\t\tthis.savePlaylist = this.savePlaylist.bind(this);\n\t\tthis.search = this.search.bind(this);\n\t}\n\n\taddTrack(track) {\n\t\tlet tracks = this.state.playlistTracks;\n\t\tif (tracks.find((savedTrack) => savedTrack.id === track.id)) {\n\t\t\treturn;\n\t\t}\n\n\t\ttracks.push(track);\n\t\tthis.setState({ playlistTracks: tracks });\n\t}\n\n\tremoveTrack(track) {\n\t\tlet tracks = this.state.playlistTracks;\n\t\ttracks = tracks.filter((currentTrack) => currentTrack.id !== track.id);\n\n\t\tthis.setState({ playlistTracks: tracks });\n\t}\n\n\tupdatePlaylistName(name) {\n\t\tthis.setState({ playlistName: name });\n\t}\n\n\tsavePlaylist() {\n\t\tconst trackURIs = this.state.playlistTracks.map((track) => track.uri);\n\t\tSpotify.savePlaylist(this.state.playlistName, trackURIs).then(() => {\n\t\t\tthis.setState({\n\t\t\t\tplaylistName: 'New Playlist',\n\t\t\t\tplaylistTracks: []\n\t\t\t});\n\t\t});\n\t}\n\n\tsearch(term) {\n\t\tSpotify.search(term).then((searchResults) => {\n\t\t\tthis.setState({ searchResults: searchResults });\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>\n\t\t\t\t\tM<span className=\"highlight\">usic Builde</span>r\n\t\t\t\t</h1>\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<SearchBar onSearch={this.search} />\n\t\t\t\t\t<div className=\"App-playlist\">\n\t\t\t\t\t\t<SearchResults\n\t\t\t\t\t\t\tsearchResults={this.state.searchResults}\n\t\t\t\t\t\t\tonAdd={this.addTrack}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Playlist\n\t\t\t\t\t\t\tplaylistName={this.state.playlistName}\n\t\t\t\t\t\t\tplaylistTracks={this.state.playlistTracks}\n\t\t\t\t\t\t\tonRemove={this.removeTrack}\n\t\t\t\t\t\t\tonNameChange={this.updatePlaylistName}\n\t\t\t\t\t\t\tonSave={this.savePlaylist}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}